// generated by diplomat-tool
import type { IsoDateTime } from "./IsoDateTime"
import type { MetazoneCalculator } from "./MetazoneCalculator"
import type { TimeZoneIdMapper } from "./TimeZoneIdMapper"
import type { u8, i8, u16, i16, u32, i32, u64, i64, usize, isize, f32, f64, pointer, char } from "./diplomat-runtime.d.ts";


/** See the [Rust documentation for `CustomTimeZone`](https://docs.rs/icu/latest/icu/timezone/struct.CustomTimeZone.html) for more information.
*/
export class CustomTimeZone {
    

    get ffiValue(): pointer;


    static createFromString(s: string): CustomTimeZone;

    static createEmpty(): CustomTimeZone;

    static createUtc(): CustomTimeZone;

    static createGmt(): CustomTimeZone;

    static createBst(): CustomTimeZone;

    trySetGmtOffsetSeconds(offsetSeconds: number): void;

    setGmtOffsetEighthsOfHour(offsetEighthsOfHour: number): void;

    clearGmtOffset(): void;

    get gmtOffsetSeconds(): number | undefined;

    get isGmtOffsetPositive(): boolean | undefined;

    get isGmtOffsetZero(): boolean | undefined;

    get gmtOffsetHasMinutes(): boolean | undefined;

    get gmtOffsetHasSeconds(): boolean | undefined;

    trySetTimeZoneId(id: string): void;

    trySetIanaTimeZoneId(mapper: TimeZoneIdMapper, id: string): void;

    clearTimeZoneId(): void;

    get timeZoneId(): string | undefined;

    trySetMetazoneId(id: string): void;

    clearMetazoneId(): void;

    get metazoneId(): string | undefined;

    trySetZoneVariant(id: string): boolean;

    clearZoneVariant(): void;

    get zoneVariant(): string | undefined;

    setStandardTime(): void;

    setDaylightTime(): void;

    get isStandardTime(): boolean | undefined;

    get isDaylightTime(): boolean | undefined;

    maybeCalculateMetazone(metazoneCalculator: MetazoneCalculator, localDatetime: IsoDateTime): void;

    

}