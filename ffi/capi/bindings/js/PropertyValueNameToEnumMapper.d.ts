// generated by diplomat-tool
import type { DataProvider } from "./DataProvider"
import type { u8, i8, u16, i16, u32, i32, u64, i64, usize, isize, f32, f64, pointer, char } from "./diplomat-runtime.d.ts";


/** A type capable of looking up a property value from a string name.
*
*See the [Rust documentation for `PropertyValueNameToEnumMapper`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapper.html) for more information.
*
*See the [Rust documentation for `PropertyValueNameToEnumMapperBorrowed`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapperBorrowed.html) for more information.
*/
export class PropertyValueNameToEnumMapper {
    

    get ffiValue(): pointer;


    getStrict(name: string): number;

    getLoose(name: string): number;

    static loadGeneralCategory(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadHangulSyllableType(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadEastAsianWidth(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadBidiClass(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadIndicSyllabicCategory(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadLineBreak(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadGraphemeClusterBreak(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadWordBreak(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadSentenceBreak(provider: DataProvider): PropertyValueNameToEnumMapper;

    static loadScript(provider: DataProvider): PropertyValueNameToEnumMapper;

    

}