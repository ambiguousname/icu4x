// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** A generic data struct to be used by ICU4X
*
*This can be used to construct a StructDataProvider.
*/

const DataStruct_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XDataStruct_destroy(ptr);
});
export class DataStruct {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        DataStruct_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static createDecimalSymbolsV1(plusSignPrefix, plusSignSuffix, minusSignPrefix, minusSignSuffix, decimalSeparator, groupingSeparator, primaryGroupSize, secondaryGroupSize, minGroupSize, digits) {
        
        const plusSignPrefixSlice = diplomatRuntime.DiplomatBuf.str8(wasm, plusSignPrefix);
        
        const plusSignSuffixSlice = diplomatRuntime.DiplomatBuf.str8(wasm, plusSignSuffix);
        
        const minusSignPrefixSlice = diplomatRuntime.DiplomatBuf.str8(wasm, minusSignPrefix);
        
        const minusSignSuffixSlice = diplomatRuntime.DiplomatBuf.str8(wasm, minusSignSuffix);
        
        const decimalSeparatorSlice = diplomatRuntime.DiplomatBuf.str8(wasm, decimalSeparator);
        
        const groupingSeparatorSlice = diplomatRuntime.DiplomatBuf.str8(wasm, groupingSeparator);
        
        const digitsSlice = diplomatRuntime.DiplomatBuf.slice(wasm, digits, "u16");
        const result = wasm.ICU4XDataStruct_create_decimal_symbols_v1(plusSignPrefixSlice.ptr, plusSignPrefixSlice.size, plusSignSuffixSlice.ptr, plusSignSuffixSlice.size, minusSignPrefixSlice.ptr, minusSignPrefixSlice.size, minusSignSuffixSlice.ptr, minusSignSuffixSlice.size, decimalSeparatorSlice.ptr, decimalSeparatorSlice.size, groupingSeparatorSlice.ptr, groupingSeparatorSlice.size, primaryGroupSize, secondaryGroupSize, minGroupSize, digitsSlice.ptr, digitsSlice.size);
    
        try {
    
            return result == 0 ? null : new DataStruct(result, []);
        } finally {
        
            plusSignPrefixSlice.free();
        
            plusSignSuffixSlice.free();
        
            minusSignPrefixSlice.free();
        
            minusSignSuffixSlice.free();
        
            decimalSeparatorSlice.free();
        
            groupingSeparatorSlice.free();
        
            digitsSlice.free();
        
        }
    }

    

}