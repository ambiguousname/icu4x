// generated by diplomat-tool
import type { FixedDecimalRoundingIncrement } from "./FixedDecimalRoundingIncrement"
import type { FixedDecimalRoundingMode } from "./FixedDecimalRoundingMode"
import type { FixedDecimalSign } from "./FixedDecimalSign"
import type { FixedDecimalSignDisplay } from "./FixedDecimalSignDisplay"
import type { pointer, char } from "./diplomat-runtime.d.ts";


/** See the [Rust documentation for `FixedDecimal`](https://docs.rs/fixed_decimal/latest/fixed_decimal/struct.FixedDecimal.html) for more information.
*/
export class FixedDecimal {
    

    get ffiValue(): pointer;


    static createFromI32(v: number): FixedDecimal;

    static createFromU32(v: number): FixedDecimal;

    static createFromI64(v: bigint): FixedDecimal;

    static createFromU64(v: bigint): FixedDecimal;

    static createFromF64WithIntegerPrecision(f: number): FixedDecimal;

    static createFromF64WithLowerMagnitude(f: number, magnitude: number): FixedDecimal;

    static createFromF64WithSignificantDigits(f: number, digits: number): FixedDecimal;

    static createFromF64WithFloatingPrecision(f: number): FixedDecimal;

    static createFromString(v: string): FixedDecimal;

    digitAt(magnitude: number): number;

    get magnitudeStart(): number;

    get magnitudeEnd(): number;

    get nonzeroMagnitudeStart(): number;

    get nonzeroMagnitudeEnd(): number;

    get isZero(): boolean;

    multiplyPow10(power: number): void;

    get sign(): FixedDecimalSign;

    set sign(sign: FixedDecimalSign);

    applySignDisplay(signDisplay: FixedDecimalSignDisplay): void;

    trimStart(): void;

    trimEnd(): void;

    padStart(position: number): void;

    padEnd(position: number): void;

    setMaxPosition(position: number): void;

    round(position: number): void;

    ceil(position: number): void;

    expand(position: number): void;

    floor(position: number): void;

    trunc(position: number): void;

    roundWithMode(position: number, mode: FixedDecimalRoundingMode): void;

    roundWithModeAndIncrement(position: number, mode: FixedDecimalRoundingMode, increment: FixedDecimalRoundingIncrement): void;

    concatenateEnd(other: FixedDecimal): boolean;

    toString(): string;

    

}